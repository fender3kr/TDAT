# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TFAnnotator
                                 A QGIS plugin
 Tensorflow Dataset Annotation Tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-08-24
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Seokyong Hong
        email                : shong3@ncsu.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from .resources import *
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from qgis.core import QgsRasterLayer, QgsProject
from .tools.SelectMapTool import SelectMapTool
from .tf_annotator_dockwidget import TFAnnotatorDockWidget

class TFAnnotator:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', 'TFAnnotator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Tensorflow Dataset Annotation Tool')
        self.toolbar = self.iface.addToolBar(u'TFAnnotator')
        self.toolbar.setObjectName(u'TFAnnotator')

        self.pluginIsActive = False
        self.dockwidget = None
        
    def tr(self, message):
        return QCoreApplication.translate('TFAnnotator', message)


    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        self.add_action(':/plugins/tf_annotator/icon/icon.png', text=self.tr(u'Tensorflow Annotation'), callback=self.run, parent=self.iface.mainWindow())
        self.add_action(':/plugins/tf_annotator/icon/select.png', text=self.tr(u'Selection'), callback=self.select, enabled_flag=False, parent=self.iface.mainWindow())
        self.add_action(':/plugins/tf_annotator/icon/fit.png', text=self.tr(u'Fit'), callback=self.fitCRS, parent=self.iface.mainWindow())
        self.iface.currentLayerChanged.connect(self.controlSelectionAction)

    def onClosePlugin(self):
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Tensorflow Dataset Annotation Tool'), action)
            self.iface.removeToolBarIcon(action)
       
        del self.toolbar

    def run(self):
        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget == None:
                self.dockwidget = TFAnnotatorDockWidget()

            self.dockwidget.closingPlugin.connect(self.onClosePlugin)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def select(self):
        self.dockwidget.resetSelectionBand()
        self.tool = SelectMapTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.tool)
        self.iface.currentLayerChanged.connect(self.deselect)
    
    def fitCRS(self):
        activeLayer = self.iface.activeLayer()
        QgsProject.instance().setCrs(activeLayer.crs())
        self.iface.mapCanvas().setExtent(activeLayer.extent())
        self.iface.mapCanvas().refresh()
    
    def deselect(self):
        if self.tool is not None:
            self.iface.mapCanvas().unsetMapTool(self.tool)
            self.tool = None
        
    def controlSelectionAction(self):
        if self.dockwidget is not None:
            self.dockwidget.resetSelectionBand()
        
        if self.iface.activeLayer() is not None and isinstance(self.iface.activeLayer(), QgsRasterLayer):
            for action in self.toolbar.actions():
                if action.text() == u'Selection' and not action.isEnabled():
                    action.setEnabled(True)
                    return
        else:
            for action in self.toolbar.actions():
                if action.text() == u'Selection' and action.isEnabled():
                    action.setEnabled(False)
                    return